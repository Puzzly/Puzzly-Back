<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.puzzly.api.repository.mybatis.CalendarContentMybatisRepository">
    <select id="selectCalendarContentByDateTimeAndCalendar" resultType="com.puzzly.api.dto.response.CalendarContentResponseDto">
        <!-- 추후 개선사항 (page, limit를 사용하지 말고 정렬기준을 통해서 Fetch 로 처리하자
         REFER : https://binux.tistory.com/148-->
        SELECT tcc.content_id, tcc.calendar_id, tc.calendar_name, tcc.create_id, tcc.delete_id,
               tcc.start_date_time, tcc.end_date_time, tcc.content, tcc.notify,
                <!--tcc.notify_time,-->
               tcc.memo, tcc.location,
               tcc.create_date_time, tcc.modify_date_time, tcc.delete_date_time, tcc.is_deleted
        FROM calendar_content tcc
        INNER JOIN
            calendar tc
        ON
            tcc.calendar_id = tc.calendar_id
        WHERE
            tcc.calendar_id = #{calendarId}
        AND
            tcc.is_deleted = #{isDeleted}
        AND
            tcc.start_date_time &gt;= #{startDateTime}
        AND
            tcc.start_date_time &lt;= #{limitStartDateTime}
        <!-- 혹은 <![CDATA[<=]]> -->
        ORDER BY tcc.start_date_time asc, tcc.content_id desc, tcc.create_date_time desc
    </select>


    <!-- 첨부파일 조회 -->
    <select id="selectCalendarContentAttachmentsByContentId" resultType="com.puzzly.api.dto.response.CalendarContentAttachmentsResponseDto">
        SELECT
            attachments_id, content_id, extension, origin_name, file_path, file_size, create_date_time,
            tcca.create_id, (SELECT nick_name from users where user_id = tcca.create_id) AS create_user_nick_name, is_deleted, delete_date_time, tcca.delete_id
        FROM
            calendar_content_attachments tcca
        WHERE
            content_id = #{contentId}
        AND
            tcca.is_deleted = #{isDeleted}
    </select>

    <select id="selectCalendarContentByContentId" resultType="com.puzzly.api.dto.response.CalendarContentResponseDto">
        SELECT
            tcc.calendar_id, tc.calendar_name, tcc.content_id, tcc.label_id, tcc.title, tcc.create_id,
            (SELECT nick_name from users tu where tu.user_id = tcc.create_id) AS create_nick_name,
            tcc.modify_id,
            (SELECT nick_name from users tu where tu.user_id = tcc.modify_id) AS modify_nick_name,
            tcc.delete_id,
            (SELECT nick_name from users tu where tu.user_id = tcc.delete_id) AS delete_nick_name,
            tcc.start_date_time, tcc.end_date_time, tcc.content, tcc.notify,
            <!--tcc.notify_time,--> tcc.memo, tcc.location,
            tcc.create_date_time, tcc.modify_date_time, tcc.delete_date_time,
        FROM
            calendar_content tcc
        INNER JOIN
            calendar tc
        ON
            tcc.calendar_id = tc.calendar_id
        WHERE
            tcc.content_id = #{contentId}
        AND
            tcc.is_deleted = #{isDeleted}
    </select>

    <select id ="selectCalendarContentRecurringInfo" resultType = "com.puzzly.api.dto.response.CalendarContentRecurringInfoResponseDto">
        SELECT
            tccri.info_id, tccri.calendar_contentt_id, tccri.recurring_type, tccri.period,
            tccri.recurring_date, tccri.recurring_day, tccri.condition_count, tccri.condition_end_date
        FROM
            calendar_content_recurring_info tccri
        WHERE
            tccri.calendar_content_id = #{content_id}
        AND
            is_deleted = #{isDeleted}
    </select>

</mapper>